AWSTemplateFormatVersion: 2010-09-09
Description: EKS Cluster

Mappings:
  ServicePrincipalPartitionMap:
    aws:
      EC2: ec2.amazonaws.com
      EKS: eks.amazonaws.com
      EKSFargatePods: eks-fargate-pods.amazonaws.com
    aws-cn:
      EC2: ec2.amazonaws.com.cn
      EKS: eks.amazonaws.com
      EKSFargatePods: eks-fargate-pods.amazonaws.com
    aws-us-gov:
      EC2: ec2.amazonaws.com
      EKS: eks.amazonaws.com
      EKSFargatePods: eks-fargate-pods.amazonaws.com

Parameters:
  #settings of network for eks
  VPCCidrBlock:
    Type: String
    Default: "10.0.0.0/16"
  PublicCidrBlock1:
    Type: String
    Default: "10.0.1.0/24"
  PublicCidrBlock2:
    Type: String
    Default: "10.0.2.0/24"
  PublicCidrBlock3:
    Type: String
    Default: "10.0.3.0/24"
  EKSClusterVersion:
    Default: "1.21"
    Type: String
  NodeGroupInstanceTypes:
    Type: String
    Default: "t3.micro"

  #setting for rds
  RDSDBName:
    Default: ambassador
    Description: initial database name
    Type: String
    MinLength: "1"
    MaxLength: "64"
    AllowedPattern: "[a-zA-Z][a-zA-Z0-9]*"
  RDSDBInstanceClass:
    Default: db.t2.micro
    Description: DB instance class
    Type: String
    ConstraintDescription: Must select a valid DB instance type.
  RDSDBAllocatedStorage:
    Default: 20
    Description: The size of the database (GiB)
    Type: Number
    MinValue: "20"
    MaxValue: "65536"
    ConstraintDescription: must be between 20 and 65536 GiB.
  RDSDBUsername:
    NoEcho: "true"
    Description: Username for MySQL database access
    Type: String
    MinLength: "1"
    MaxLength: "16"
    AllowedPattern: "[a-zA-Z][a-zA-Z0-9]*"
    ConstraintDescription: must begin with a letter and contain only alphanumeric characters.
  RDSDBPassword:
    NoEcho: "true"
    Description: Password MySQL database access
    Type: String
    MinLength: "8"
    MaxLength: "41"
    AllowedPattern: "[a-zA-Z0-9]*"
    ConstraintDescription: must contain only alphanumeric characters.

Resources:
  #resource for network
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VPCCidrBlock
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-vpc
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-ig
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-public-route-table
  RouteInternetGateway:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      GatewayId: !Ref InternetGateway
      DestinationCidrBlock: 0.0.0.0/0
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [0, Fn::GetAZs: !Ref AWS::Region]
      CidrBlock: !Ref PublicCidrBlock1
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-public-subnet1
        - Key: kubernetes.io/role/elb
          Value: 1
  PublicRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [1, Fn::GetAZs: !Ref AWS::Region]
      CidrBlock: !Ref PublicCidrBlock2
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-public-subnet2
        - Key: kubernetes.io/role/elb
          Value: 1
  PublicRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2
  PublicSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [2, Fn::GetAZs: !Ref AWS::Region]
      CidrBlock: !Ref PublicCidrBlock3
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-public-subnet3
        - Key: kubernetes.io/role/elb
          Value: 1
  PublicRouteTableAssociation3:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet3
  ControlPlane:
    Type: AWS::EKS::Cluster
    Properties:
      Name: !Sub ${AWS::StackName}-cluster
      ResourcesVpcConfig:
        EndpointPrivateAccess: true
        EndpointPublicAccess: true
        SecurityGroupIds:
          - !Ref ControlPlaneSecurityGroup
        SubnetIds:
          - !Ref PublicSubnet1
          - !Ref PublicSubnet2
          - !Ref PublicSubnet3
      RoleArn: !GetAtt EKSClusterRole.Arn
      Version: !Ref EKSClusterVersion
  EKSClusterRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                !FindInMap [
                  ServicePrincipalPartitionMap,
                  !Ref AWS::Partition,
                  EKS,
                ]
        Version: 2012-10-17
      ManagedPolicyArns:
        - !Sub arn:${AWS::Partition}:iam::aws:policy/AmazonEKSClusterPolicy
        - !Sub arn:${AWS::Partition}:iam::aws:policy/AmazonEKSVPCResourceController
  ControlPlaneSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Communication between the control plane and worker nodegroups
      VpcId: !Ref VPC
      GroupName: !Sub ${AWS::StackName}-eks-control-plane-sg
  ControlPlaneSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref ControlPlaneSecurityGroup
      IpProtocol: "-1"
      SourceSecurityGroupId: !GetAtt ControlPlaneSecurityGroup.GroupId
      SourceSecurityGroupOwnerId: !Ref AWS::AccountId
  ManagedNodeGroup:
    Type: AWS::EKS::Nodegroup
    Properties:
      AmiType: AL2_x86_64
      DiskSize: 10
      ClusterName: !Ref ControlPlane
      InstanceTypes:
        - !Ref NodeGroupInstanceTypes
      Labels:
        alpha.eksctl.io/cluster-name: !Ref ControlPlane
        alpha.eksctl.io/nodegroup-name: !Sub ng-${AWS::StackName}
      NodeRole: !GetAtt NodeInstanceRole.Arn
      NodegroupName: !Sub ng-${AWS::StackName}
      ScalingConfig:
        DesiredSize: 1
        MaxSize: 2
        MinSize: 1
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
        - !Ref PublicSubnet3
      Tags:
        alpha.eksctl.io/nodegroup-name: !Sub ng-${AWS::StackName}
        alpha.eksctl.io/nodegroup-type: managed
  NodeInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::StackName}-eks-node-role
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                !FindInMap [
                  ServicePrincipalPartitionMap,
                  !Ref AWS::Partition,
                  EC2,
                ]
        Version: 2012-10-17
      ManagedPolicyArns:
        - !Sub arn:${AWS::Partition}:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
        - !Sub arn:${AWS::Partition}:iam::aws:policy/AmazonEKSWorkerNodePolicy
        - !Sub arn:${AWS::Partition}:iam::aws:policy/AmazonEKS_CNI_Policy
        - !Sub arn:${AWS::Partition}:iam::aws:policy/AmazonSSMManagedInstanceCore
      Path: /

  # create repositories for docker image
  NestRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: nest-ambassador
  VueAdminRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: vue-admin-ambassador
  VueAmbassadorRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: vue-ambassador
  NuxtAmbassadorRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: nuxt-ambassador
  # create rds
  
  RDSDBSubnetGroup: 
    Type: "AWS::RDS::DBSubnetGroup"
    Properties: 
      DBSubnetGroupDescription: subnet group for rds that is used for nest eks
      SubnetIds: 
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
        - !Ref PublicSubnet3
  NestRDS:
    Type: "AWS::RDS::DBInstance"
    Properties:
      DBSubnetGroupName: !Ref RDSDBSubnetGroup
      PubliclyAccessible: true
      DBInstanceIdentifier: !Ref RDSDBName
      DBName: !Ref RDSDBName
      DBInstanceClass: !Ref RDSDBInstanceClass
      AllocatedStorage: !Ref RDSDBAllocatedStorage
      Engine: MySQL
      EngineVersion: 8.0.23
      MasterUsername: !Ref RDSDBUsername
      MasterUserPassword: !Ref RDSDBPassword

  #secret for !Ref NestRepository
  SecretForNestImage:
    Type: "AWS::SecretsManager::Secret"
    Properties:
      Name: SecretForNestImage
      Description: This secret has a hardcoded password in SecretString (use GenerateSecretString instead)
      SecretString: '{"username":"MasterUsername","password":"secret-password"}'
      Tags:
        - Key: CHECKOUT_URL
          Value: http://crame.link/checkout
        - Key: STRIPE_KEY
          Value: sk_test_51K6qJkFwSE9OqyMq1jMKaH4NDTIWWPaacYRI26tDLuF0GKcDMNPtTYwrOl0mXQpMWMURIVymg041odWK79UxozoT00ztJ6cTgx
        - Key: MYSQL_HOST
          Value: !GetAtt NestRDS.Endpoint.Address
        - Key: MYSQL_PORT
          Value: !GetAtt NestRDS.Endpoint.Port
        - Key: MYSQL_USERNAME
          Value: !Ref RDSDBUsername
        - Key: MYSQL_PASSWORD
          Value: !Ref RDSDBPassword
        - Key: MYSQL_DATABASE
          Value: !Ref RDSDBName

    #TODO:Create S3 for image
